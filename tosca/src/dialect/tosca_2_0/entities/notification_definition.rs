use super::{super::super::super::grammar::*, implementation_definition::*, parameter_definition::*};

use {
    compris::{annotate::*, resolve::*},
    kutil::{
        cli::depict::*,
        std::{error::*, immutable::*},
    },
    std::collections::*,
};

//
// NotificationDefinition
//

/// (Documentation copied from
/// [TOSCA specification 2.0](https://docs.oasis-open.org/tosca/TOSCA/v2.0/TOSCA-v2.0.html))
///
/// A notification definition defines an asynchronous notification or incoming message that can be
/// associated with an interface. The notification is a way for events generated by external
/// implementations to be transmitted to the TOSCA orchestrator. Values can be sent with a
/// notification as notification outputs and can be mapped to node/relationship attributes
/// similarly to the way operation outputs are mapped to attributes. The artifact that the
/// orchestrator is registering with in order to receive the notification is specified using the
/// implementation keyname in a similar way to operations. Artifacts registered to recieve
/// events may be configured by means of parameters provided under the inputs keyname of the
/// notification definition.
#[derive(Clone, Debug, Default, Depict, Resolve)]
#[depict(tag = tag::source_and_span)]
#[resolve(annotated_parameter=AnnotatedT)]
pub struct NotificationDefinition<AnnotatedT>
where
    AnnotatedT: Annotated + Clone + Default,
{
    /// The optional description string for the associated notification.
    #[resolve]
    #[depict(option, style(string))]
    pub description: Option<ByteString>,

    /// The optional definition of the notification implementation.
    #[resolve(single)]
    #[depict(option, as(depict))]
    pub implementation: Option<ImplementationDefinition<AnnotatedT>>,

    /// The optional map of parameter definitions for notification input values.
    #[resolve]
    #[depict(iter(kv), as(depict), key_style(string))]
    pub inputs: ParameterDefinitions<AnnotatedT>,

    /// The optional map of parameter definitions that specify notification output values. Only
    /// as part of node and relationship type definitions, the output definitions may include
    /// their mappings onto attributes of the node type or relationship type that contains the
    /// definition.
    #[resolve]
    #[depict(iter(kv), as(depict), key_style(string))]
    pub outputs: ParameterDefinitions<AnnotatedT>,

    #[resolve(annotations)]
    #[depict(skip)]
    pub(crate) annotations: StructAnnotations,
}

impl<AnnotatedT> Subentity<NotificationDefinition<AnnotatedT>> for NotificationDefinition<AnnotatedT>
where
    AnnotatedT: 'static + Annotated + Clone + Default,
{
    fn complete(
        &mut self,
        _name: Option<ByteString>,
        scope: Option<&Scope>,
        parent: Option<&Self>,
        catalog: &mut Catalog,
        source_id: &SourceID,
        errors: ToscaErrorRecipientRef,
    ) -> Result<(), ToscaError<WithAnnotations>> {
        let errors = &mut errors.to_error_recipient();

        complete_subentity_map_field!(input, inputs, scope, self, parent, true, catalog, source_id, errors);
        complete_subentity_map_field!(output, outputs, scope, self, parent, true, catalog, source_id, errors);

        if let Some(parent) = parent {
            complete_field_none!(implementation, self, parent);
        }

        Ok(())
    }
}

impl<AnnotatedT> IntoScoped<NotificationDefinition<AnnotatedT>> for NotificationDefinition<AnnotatedT>
where
    AnnotatedT: Annotated + Clone + Default,
{
    fn into_scoped(&self, scope: Option<&Scope>) -> Self {
        Self {
            description: self.description.clone(),
            implementation: self.implementation.clone(),
            inputs: self.inputs.into_scoped(scope),
            outputs: self.outputs.into_scoped(scope),
            annotations: self.annotations.clone(),
        }
    }
}

//
// NotificationDefinitions
//

/// Map of [NotificationDefinition].
pub type NotificationDefinitions<AnnotatedT> = BTreeMap<ByteString, NotificationDefinition<AnnotatedT>>;
