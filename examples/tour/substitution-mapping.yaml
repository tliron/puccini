tosca_definitions_version: tosca_2_0

# Also see: substitution-mapping-client.yaml

metadata:

  template_name: Substitution Mapping Example
  template_author: Puccini

imports:

# (Make sure to take a look at the import)
- imports/super-load-balancer.yaml

service_template:

  inputs:

    # This input is mapped to a property in "substitution_mappings"
    # Thus, we do not have to give it a default value
    # (even though it is a required input)
    scale:
      type: integer

  node_templates:

    loadbalancer:
      type: tosca:LoadBalancer

    # Both the WebServer and DBMS types derive from SoftwareComponent, meaning that they require a host
    # So normally this service template would fail to parse due to unsatisfied requirements
    # However, because we are mapping these in "substitution_mappings", Puccini will allow it
    # (They are expected to be satisfied by a client service template)

    admin:
      type: tosca:WebServer
      properties:
        component_version: '1.0'

    db:
      type: tosca:DBMS

  # Allow this entire service to be used as a single node
  substitution_mappings:
    node_type: SuperLoadBalancer
    capabilities:
      # Expose the internal loadbalancer node's capability
      # The capability types must be compatible
      client: [ loadbalancer, client ]
    requirements:
      # Expose the requirements of our software components
      # Any requirement can be mapped
      admin_host: [ admin, host ]
      db_host: [ db, host ]
    properties:
      # Properties are mapped to inputs
      # (You can also map properties to node template properties, though this use is deprecated in TOSCA 1.3)
      # The data types must be compatible
      redundancy: [ scale ]
    attributes:
      # The data types must be compatible
      admin_state: [ admin, state ]
      db_state: [ db, state ]
    interfaces:
      # The interface types must be compatible
      Standard: [ admin, Standard ]
